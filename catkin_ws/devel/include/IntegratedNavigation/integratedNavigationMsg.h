// Generated by gencpp from file IntegratedNavigation/IntegratedNavigationMsg.msg
// DO NOT EDIT!


#ifndef INTEGRATEDNAVIGATION_MESSAGE_INTEGRATEDNAVIGATIONMSG_H
#define INTEGRATEDNAVIGATION_MESSAGE_INTEGRATEDNAVIGATIONMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace IntegratedNavigation
{
template <class ContainerAllocator>
struct IntegratedNavigationMsg_
{
  typedef IntegratedNavigationMsg_<ContainerAllocator> Type;

  IntegratedNavigationMsg_()
    : header()
    , GPSWeek(0.0)
    , GPSTime(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)
    , Lattitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , Baseline(0.0)
    , NSV1(0)
    , NSV2(0)
    , Status(0)
    , Age(0.0)
    , warning(0)  {
    }
  IntegratedNavigationMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GPSWeek(0.0)
    , GPSTime(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)
    , Lattitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , Baseline(0.0)
    , NSV1(0)
    , NSV2(0)
    , Status(0)
    , Age(0.0)
    , warning(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _GPSWeek_type;
  _GPSWeek_type GPSWeek;

   typedef float _GPSTime_type;
  _GPSTime_type GPSTime;

   typedef float _Heading_type;
  _Heading_type Heading;

   typedef float _Pitch_type;
  _Pitch_type Pitch;

   typedef float _Roll_type;
  _Roll_type Roll;

   typedef float _gyroX_type;
  _gyroX_type gyroX;

   typedef float _gyroY_type;
  _gyroY_type gyroY;

   typedef float _gyroZ_type;
  _gyroZ_type gyroZ;

   typedef float _accX_type;
  _accX_type accX;

   typedef float _accY_type;
  _accY_type accY;

   typedef float _accZ_type;
  _accZ_type accZ;

   typedef float _Lattitude_type;
  _Lattitude_type Lattitude;

   typedef float _Longitude_type;
  _Longitude_type Longitude;

   typedef float _Altitude_type;
  _Altitude_type Altitude;

   typedef float _Ve_type;
  _Ve_type Ve;

   typedef float _Vn_type;
  _Vn_type Vn;

   typedef float _Vu_type;
  _Vu_type Vu;

   typedef float _Baseline_type;
  _Baseline_type Baseline;

   typedef int32_t _NSV1_type;
  _NSV1_type NSV1;

   typedef int32_t _NSV2_type;
  _NSV2_type NSV2;

   typedef int8_t _Status_type;
  _Status_type Status;

   typedef float _Age_type;
  _Age_type Age;

   typedef int8_t _warning_type;
  _warning_type warning;




  typedef boost::shared_ptr< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> const> ConstPtr;

}; // struct IntegratedNavigationMsg_

typedef ::IntegratedNavigation::IntegratedNavigationMsg_<std::allocator<void> > IntegratedNavigationMsg;

typedef boost::shared_ptr< ::IntegratedNavigation::IntegratedNavigationMsg > IntegratedNavigationMsgPtr;
typedef boost::shared_ptr< ::IntegratedNavigation::IntegratedNavigationMsg const> IntegratedNavigationMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace IntegratedNavigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'IntegratedNavigation': ['/home/riki/Test/catkin_ws/src/IntegratedNavigation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d81d7ef76c6aee37d26e89632fe99105";
  }

  static const char* value(const ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd81d7ef76c6aee37ULL;
  static const uint64_t static_value2 = 0xd26e89632fe99105ULL;
};

template<class ContainerAllocator>
struct DataType< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IntegratedNavigation/IntegratedNavigationMsg";
  }

  static const char* value(const ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
float32 GPSWeek\n\
float32 GPSTime\n\
float32 Heading\n\
float32 Pitch\n\
float32 Roll\n\
float32 gyroX\n\
float32 gyroY\n\
float32 gyroZ\n\
float32 accX\n\
float32 accY\n\
float32 accZ\n\
float32 Lattitude\n\
float32 Longitude\n\
float32 Altitude\n\
float32 Ve # velocity towards east\n\
float32 Vn # velocity towards north\n\
float32 Vu\n\
float32 Baseline # Velocity of vehicle\n\
int32 NSV1 # number of the settlelites\n\
int32 NSV2\n\
int8 Status\n\
float32 Age\n\
int8 warning\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GPSWeek);
      stream.next(m.GPSTime);
      stream.next(m.Heading);
      stream.next(m.Pitch);
      stream.next(m.Roll);
      stream.next(m.gyroX);
      stream.next(m.gyroY);
      stream.next(m.gyroZ);
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
      stream.next(m.Lattitude);
      stream.next(m.Longitude);
      stream.next(m.Altitude);
      stream.next(m.Ve);
      stream.next(m.Vn);
      stream.next(m.Vu);
      stream.next(m.Baseline);
      stream.next(m.NSV1);
      stream.next(m.NSV2);
      stream.next(m.Status);
      stream.next(m.Age);
      stream.next(m.warning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct IntegratedNavigationMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::IntegratedNavigation::IntegratedNavigationMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GPSWeek: ";
    Printer<float>::stream(s, indent + "  ", v.GPSWeek);
    s << indent << "GPSTime: ";
    Printer<float>::stream(s, indent + "  ", v.GPSTime);
    s << indent << "Heading: ";
    Printer<float>::stream(s, indent + "  ", v.Heading);
    s << indent << "Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Roll);
    s << indent << "gyroX: ";
    Printer<float>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<float>::stream(s, indent + "  ", v.gyroY);
    s << indent << "gyroZ: ";
    Printer<float>::stream(s, indent + "  ", v.gyroZ);
    s << indent << "accX: ";
    Printer<float>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<float>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<float>::stream(s, indent + "  ", v.accZ);
    s << indent << "Lattitude: ";
    Printer<float>::stream(s, indent + "  ", v.Lattitude);
    s << indent << "Longitude: ";
    Printer<float>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Altitude: ";
    Printer<float>::stream(s, indent + "  ", v.Altitude);
    s << indent << "Ve: ";
    Printer<float>::stream(s, indent + "  ", v.Ve);
    s << indent << "Vn: ";
    Printer<float>::stream(s, indent + "  ", v.Vn);
    s << indent << "Vu: ";
    Printer<float>::stream(s, indent + "  ", v.Vu);
    s << indent << "Baseline: ";
    Printer<float>::stream(s, indent + "  ", v.Baseline);
    s << indent << "NSV1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.NSV1);
    s << indent << "NSV2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.NSV2);
    s << indent << "Status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Status);
    s << indent << "Age: ";
    Printer<float>::stream(s, indent + "  ", v.Age);
    s << indent << "warning: ";
    Printer<int8_t>::stream(s, indent + "  ", v.warning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATEDNAVIGATION_MESSAGE_INTEGRATEDNAVIGATIONMSG_H
